
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.18.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------

using OpenCCSharp.Conversion;
using OpenCCSharp.Presets;

namespace OpenCCSharp.ConsoleApp
{
    using Terminal.Gui;


    public record KnownVariantInfo(ChineseConversionVariant Code, string Name)
    {

        /// <inheritdoc />
        public override string ToString() => $"{Name} ({Code})";

    }

    public partial class MainWindow
    {

        private static readonly List<KnownVariantInfo> knownVariants = new()
        {
            new(ChineseConversionVariant.Hans, "简体中文"),
            new(ChineseConversionVariant.Hant, "繁体中文（OpenCC标准）"),
            new(ChineseConversionVariant.HK, "香港繁体"),
            new(ChineseConversionVariant.TW, "台湾正体"),
            new(ChineseConversionVariant.Kyujitai, "日语旧字体（OpenCC标准）"),
            new(ChineseConversionVariant.Shinjitai, "日语新字体"),
        };

        private ScriptConverterBase? scriptConverter;


        public MainWindow()
        {
            InitializeComponent();

            textView1.Border = new()
            {
                BorderStyle = BorderStyle.Single,
                Title = "源文本",
                Child = textView1,
            };
            textView2.Border = new()
            {
                BorderStyle = BorderStyle.Single,
                Title = "输出文本",
                Child = textView2,
            };
            textView1.Text = "在此处键入文本。";
            textView1.WantMousePositionReports = true;
            textView2.ReadOnly = true;

            //variantComboBox1.ReadOnly = true;
            //variantComboBox2.ReadOnly = true;

            variantComboBox1.SetSource(knownVariants);
            variantComboBox2.SetSource(knownVariants);

            variantComboBox1.Enter += (_) =>
            {
                variantComboBox1.Expand();
            };

            variantComboBox2.Enter += (_) =>
            {
                variantComboBox2.Expand();
            };

            variantComboBox1.SelectedItem = knownVariants.FindIndex(v => v.Code == ChineseConversionVariant.Hans);
            variantComboBox2.SelectedItem = knownVariants.FindIndex(v => v.Code == ChineseConversionVariant.Hant);

            textView1.TextChanged += TextView1_TextChanged;
            swapButton.Clicked += SwapButton_Clicked;
            exitButton.Clicked += ExitButton_Clicked;
        }

        private void SwapButton_Clicked()
        {
        }

        // 0: No pending work
        // 1: Pending
        // 2: Converting
        private int conversionWorkState;

        private async ValueTask RefreshConversionAsync()
        {
            REPEAT:
            conversionWorkState = 2;
            await Task.Delay(1000);
            try
            {
                if (scriptConverter == null)
                {
                    var src = knownVariants[variantComboBox1.SelectedItem];
                    var target = knownVariants[variantComboBox2.SelectedItem];
                    scriptConverter = await ChineseConversionPresets.GetConverterAsync(src.Code, target.Code);
                }
            }
            catch (Exception ex)
            {
                textView2.Text = ex.ToString();
            }
            if (Interlocked.CompareExchange(ref conversionWorkState, 2, 0) == 1) goto REPEAT;
        }

        private void TriggerRefreshConversion()
        {
            var prev = Interlocked.Exchange(ref conversionWorkState, 1);
            if (prev == 0)
                _ = RefreshConversionAsync();
        }

        private void TextView1_TextChanged()
        {
            TriggerRefreshConversion();
        }

        private void ExitButton_Clicked()
        {
            Application.RequestStop(this);
        }
    }
}
